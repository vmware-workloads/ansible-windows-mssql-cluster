
  
          
- name: Get hostname (computer name)
  ansible.windows.win_shell: |
    [System.Net.Dns]::GetHostName()
  register: computerName_raw
  
- name: Trim computerName string
  set_fact:
    computerName: "{{ computerName_raw.stdout | trim }}"
    cacheable: true 
    
      
  
- name: Create DB Account
  ansible.windows.win_shell: |
    $sql_file = [Console]::In.ReadToEnd().replace("`n","`t")
    sqlcmd -S 127.0.0.1 -E -Q $sql_file
  args:
    stdin: "{{ lookup('template', 'templates/create_db_user.j2') }}"
  register: sql_out
  failed_when: sql_out.stderr != ""
  when: inventory_hostname = ansible_play_hosts[0]
 
 
# Create the database on the Primary node  
  
- name: Create DB & backup
  ansible.windows.win_shell: |
    $sql_file = [Console]::In.ReadToEnd().replace("`n","`t")
    sqlcmd -S 127.0.0.1 -E -Q $sql_file
  args:
    stdin: "{{ lookup('template', 'templates/create_db.j2') }}"
  register: sql_out
  failed_when: sql_out.stderr != ""
  when: inventory_hostname = ansible_play_hosts[0]  
  

# Create the HADR endpoint on all nodes    

- name: Create HADR Endpoing
  ansible.windows.win_shell: |
    $sql_file = [Console]::In.ReadToEnd().replace("`n","`t")
    sqlcmd -S 127.0.0.1 -E -Q $sql_file
  args:
    stdin: "{{ lookup('template', 'templates/create_hadr_endpoint.j2') }}"
  register: sql_out
  failed_when: sql_out.stderr != ""
  

# Create the AG on the Primary node  
  
- name: Create DB & backup
  ansible.windows.win_shell: |
    $sql_file = [Console]::In.ReadToEnd().replace("`n","`t")
    sqlcmd -S 127.0.0.1 -E -Q $sql_file
  args:
    stdin: "{{ lookup('template', 'templates/create_ag.j2') }}"
  register: sql_out
  failed_when: sql_out.stderr != ""
  when: inventory_hostname = ansible_play_hosts[0] 
  


# Get all other nodes to join the AG
  
- name: Create DB & backup
  ansible.windows.win_shell: |
    $sql_file = [Console]::In.ReadToEnd().replace("`n","`t")
    sqlcmd -S 127.0.0.1 -E -Q $sql_file
  args:
    stdin: "{{ lookup('template', 'templates/join_ag.j2') }}"
  register: sql_out
  failed_when: sql_out.stderr != ""
  when: inventory_hostname != ansible_play_hosts[0]     




  
  
# - name: Process DB Scripts On First Host
#   ansible.windows.win_shell: |
#     $sql_file = [Console]::In.ReadToEnd().replace("`n","`t")
#     sqlcmd -S 127.0.0.1 -E -Q $sql_file
#   args:
#     stdin: "{{ lookup('template', item) }}"
#   register: sql_out
#   failed_when: sql_out.stderr != ""   
#   loop: "{{ q('fileglob', 'templates/init_cluster/*.j2') }}"  


