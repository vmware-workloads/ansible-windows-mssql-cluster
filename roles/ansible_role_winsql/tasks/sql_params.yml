# We now setup TCP/named pipes & firewall rules for SQL

- name: Enable TCP and Named Pipes for SQL
  ansible.windows.win_shell: |
    Import-Module -Name SQLPS
    $wmi = New-Object Microsoft.SqlServer.Management.Smo.Wmi.ManagedComputer $env:computername
    $uri = "ManagedComputer[@Name='" + (get-item env:\computername).Value + "']/ServerInstance[@Name='MSSQLSERVER']/ServerProtocol[@Name='Tcp']"
    $Tcp=$wmi.GetSmoObject($uri)
    $Tcp.IsEnabled = $true
    $Tcp.Alter()
    $Np = $wmi.GetSmoObject($uri)
    $Np.IsEnabled = $true
    $Np.Alter()
    $Np

- name: Firewall rule to allow SQL Connections on TCP port 1433
  community.windows.win_firewall_rule:
    name: SQL-Remote
    localport: "{{ SQL_Remote_port }}"
    action: allow
    direction: in
    protocol: tcp
    state: present
    enabled: yes 

- name: Firewall rule to allow SQL AG Endpoint on TCP port 5022
  community.windows.win_firewall_rule:
    name: AG-Endpoint
    localport: "{{ AG_Endpoint_port }}"
    action: allow
    direction: in
    protocol: tcp
    state: present
    enabled: yes               

# We let the SQL serivce access the drives we've created.
# As we're not in production, this will do for now, but ideally
# we should create a separate user for SQL, etc.

- name: Set drive/folder permissions for the sql service
  ansible.windows.win_acl:
    user: NT Service\MSSQLSERVER
    path: "{{ item.value + ':\' }}"
    rights: FullControl
    type: allow
    state: present
  loop: "{{ drive_mapping | dict2items }}"        

    
- name: Save the db scipt to a file
  ansible.windows.win_template:
    src: db_script
    dest: "{{ db_script_path }}" 

# Here we convert any env variables (e.g. %USERPROFILE%) into a plain string
# for powershell by echoing through windows cmd
    
- name: Process string for powershell
  run_once: true
  ansible.windows.win_shell: |
    echo "{{ db_script_path }}"
  args:
    executable: cmd 
  register: db_script_ps_path_raw
  
- name: strip string
  set_fact:
     db_script_ps_path: "{{ db_script_ps_path_raw.stdout | trim | replace('\"', '')}}" 
     

- name: Display the converted string
  debug:
    msg: "Converted string: {{ db_script_ps_path }}" 
    


- name: Get info for a mssql service
  ansible.windows.win_service_info:
    name: MSSQLSERVER
  register: mssql_service_info 
