- name: Setup SQL Always-On Cluster
  hosts: all
  become: true


  vars:
    
    ansible_connection: ssh
    ansible_shell_type: powershell

    # It would be nice if we could programatically define this list of letters
    # in python you can use the ord() and char() functions to convert into ascii codes
    # and numerically iterate. However, Ansible doesn't nativley implement these fns 
    # so this is the easiest way...

    letters: ['e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']



  tasks:

    # Store the extra IP address assigned from VCF Automation for use later to create the cluster
    # We 'take' this from the extra network adapter configured 
    # And then remove the IP address configured there
    # This is 'safe' as VCF Automation still has the IP assigned to this deployment

    - name: Borrow IP address from Adapter 2 from the first host
      run_once: true
      ansible.windows.win_shell: |
        (Get-NetIPAddress -InterfaceAlias 'Ethernet2' | Where AddressFamily -eq "IPv4").IPAddress
      register: cluster_ip
      when: cluster_ip is not defined

    - name: Remove borrowed IP from Adapter 2
      ansible.windows.win_shell: |
        Remove-NetIPAddress -InterfaceAlias 'Ethernet2' -IncludeAllCompartments -Confirm:$false  


    # Make sure the first adapter is primary, important for the cluster creation later

    - name: Ensure Adapter 0 is set to Primary
      ansible.windows.win_shell: |
        Set-NetIPInterface -InterfaceAlias 'Ethernet0' -InterfaceMetric 0



    # Now initalize, partition and format the disks
    # First get the latest info from the hosts

    - name: Get disk facts from Windows hosts
      community.windows.win_disk_facts:


    # Then we create a mapping between the drive letters and disk names passed in from VCF         

    - name: Create drive letter device id dict
      set_fact:
        drive_mapping: "{{ dict(disk_names | zip(letters)) }}"
        cacheable: true


    # Scan the output of the disk information gathered above to get the
    # disks that are RAW and type VMware Virtual Disk
    # this should be the disks that have been created by VCF Automation
    # We could tweak this to make it more certain that they are indeed
    # the correct drives, but this should be a sound assumption

    - name: Get device IDs for raw virt disks
      set_fact:
        device_id_list: "{{ device_id_list | default([]) + [item.physical_disk.device_id] }}"
      when:
            - item.partition_style == 'RAW'
            - item.friendly_name == 'VMware Virtual disk'     
      loop: "{{ ansible_facts.disks }}"

    - name: Display the device id list
      debug:
        var: device_id_list
      when: device_id_list is defined  


    # Next, we create a dictionary with the device IDs (for our expected drives)
    # and the disk letters. The size of this will be limited by the number of 
    # disks found
    # Thus we'll have two dictionaries, implicitly the same size (as they are based
    # on the input names from VCF Automation)
    #
    # disk mapping -- for device IDs/letters <-- used to init & partition disks 
    # drive mapping -- for disk names/letters <-- used to format the drives with the correct label
    # In theory we could merge these...       

    - name: Create drive letter disk name dict 
      set_fact:
        disk_mapping: "{{ dict( device_id_list | zip(letters)) }}"
        cacheable: true
      when: device_id_list is defined  

    - name: Display the disk mapping
      debug:
        var: disk_mapping   

    - name: Display the drive mapping
      debug:
        var: drive_mapping


    # Itterate over the device IDs to init the disks

    - name: Initialize disks
      community.windows.win_initialize_disk:
        disk_number: "{{ item }}"
      loop: "{{ device_id_list }}"
      when: device_id_list is defined


    # Partition the drives with the appropriate drive letter

    - name: Partition the drives
      community.windows.win_partition:
        drive_letter: "{{ item.value }}"
        disk_number: "{{ item.key }}"
        partition_size: -1
      loop: "{{ disk_mapping | dict2items }}"   
      loop_control:
        index_var: index
      register: partition_result
      when: device_id_list is defined      


    # Format the disks with the labels defined from VCF Automation

    - name: Format disks
      community.windows.win_format:
        drive_letter: "{{ item.value }}"
        file_system: NTFS
        new_label: "{{ item.key }}"
        allocation_unit_size: 65536
      loop: "{{ drive_mapping | dict2items }}"   
      register: format_result
      when: device_id_list is defined       


   # 
   # In the next section we do some basic setup on the VMs and
   # install Choco and then MS SQL and MGMT tools
   #


   # Install Failover cluster feature + tools
   
    - name: Install Failover-Clustering with sub features and management tools
      ansible.windows.win_feature:
        name: Failover-Clustering
        state: present
        include_sub_features: true
        include_management_tools: true
        
   # This shouldn't be needed, but sometimes failover clustering tools are
   # not installed by ansible.windows.win_feature     
        
    - name: Explicitly ensure failover clustering mgmt tools are installed
      ignore_errors: true
      ansible.windows.win_shell: |
        Install-WindowsFeature -name FailOver-Clustering -IncludeManagementTools       


   # Install MPIO and set up for iSCSI volumes

    - name: Install Multipath IO
      ansible.windows.win_feature:
        name: Multipath-IO
        state: present

    - name: Reboot 
      ansible.windows.win_reboot: 

    - name: Configure MultiPath IO
      ansible.windows.win_shell: |
        Enable-MSDSMAutomaticClaim -BusType iSCSI
        Set-MPIOSetting -CustomPathRecovery Enabled -NewPathRecoveryInterval 20 -NewRetryCount 60 -NewPDORemovePeriod 60 -NewPathVerificationPeriod 30 -NewDiskTimeout 60


    # Get choco

    - name: Ensure Chocolatey itself is installed, using community repo for the bootstrap
      win_chocolatey:
        name: chocolatey   

       
        
   # Install the MS-SQL Server Dev Edition from the Choco catalogue

    - name: Get computername
      ansible.windows.win_shell: |
        [System.Net.Dns]::GetHostName()
      register: computerName   
     
    - name: Install SQL Server 2022
      win_chocolatey:
        name: sql-server-2022
        state: present
        package_params: SQLSYSADMINACCOUNTS:{{ computerName.stdout }}\Administrator
      retries: 3
      delay: 3
      register: result
      until: result.rc == 0  
      
      
    # Install SQL mamagement studio, etc.      

    - name: Install SQL Mgmt Tools
      win_chocolatey:
        name: sql-server-management-studio
        state: present   


    # We now setup TCP/named pipes & firewall rules for SQL

    - name: Enable TCP and Named Pipes for SQL
      ansible.windows.win_shell: |
        Import-Module -Name SQLPS
        $wmi = New-Object Microsoft.SqlServer.Management.Smo.Wmi.ManagedComputer $hostname
        $uri = "ManagedComputer[@Name='" + (get-item env:\computername).Value + "']/ServerInstance[@Name='MSSQLSERVER']/ServerProtocol[@Name='Tcp']"
        $Tcp=$wmi.GetSmoObject($uri)
        $Tcp.IsEnabled = $true
        $Tcp.Alter()
        $Np = $wmi.GetSmoObject($uri)
        $Np.IsEnabled = $true
        $Np.Alter()
        $Np

    - name: Firewall rule to allow SQL Connections on TCP port 1433
      community.windows.win_firewall_rule:
        name: SQL-Remote
        localport: 1433
        action: allow
        direction: in
        protocol: tcp
        state: present
        enabled: yes 

    - name: Firewall rule to allow SQL AG Endpoint on TCP port 5022
      community.windows.win_firewall_rule:
        name: AG-Endpoint
        localport: 5022
        action: allow
        direction: in
        protocol: tcp
        state: present
        enabled: yes               

    - name: Reboot
      ansible.windows.win_reboot:


    # Now, configure iSCSI...        

    - name: Start iSCSI Service + Set to Auto Start
      ansible.windows.win_service:
        name: MSiSCSI
        start_mode: auto
        state: started   

    # Use the IQN from VCF Automation to make sure we have the right LUNs

    - name: Configure iSCSI Target + LUNs
      ignore_errors: true
      ansible.windows.win_shell: |
        New-IscsiTargetPortal -TargetPortalAddress "{{ iscsi_share.IP }}"
        Get-IscsiTarget | Where NodeAddress -eq "{{ iscsi_share.vSAN_iSCSI_iqn }}" | Connect-IscsiTarget

    - name: Format iSCSI disks on First Host
      run_once: true
      ignore_errors: true
      ansible.windows.win_shell: |
        Get-Disk | where FriendlyName -eq "Vmware Virtual SAN" | Initialize-Disk -PartitionStyle GPT -PassThru | New-Partition -AssignDriveLetter -UseMaximumSize | Format-Volume -FileSystem NTFS      



    # Now setup Windows Clustering, using the IP we stored from the extra adapter earlier

    - name: Collect IP addresses from each host
      set_fact:
        ip_addresses: "{{ groups['sql'] | map('extract', hostvars, 'ansible_host') | list }}" 
        

    - name: Create Windows Cluster
      run_once: true
      ansible.windows.win_shell: |
        $my_ip_list = "{{ ip_addresses }}" | ConvertFrom-Json
        new-cluster -Name {{ 'sql_cluster' + '-' + deployment_id }} -Node $my_ip_list -AdministrativeAccessPoint Dns -StaticAddress {{ cluster_ip.stdout }}

    - name: Enable AlwaysOn Avail Groups
      ansible.windows.win_shell: |
        foreach ($node in Get-ClusterNode) {Enable-SqlAlwaysOn -ServerInstance $node -Force}  
        Restart-Service MSSQLSERVER


   # Setup a shared disk, maps to 'C:\ClusterStorage\Volume1' on each node

    - name: Create cluster shared disk
      run_once: true    
      ansible.windows.win_shell: |
        Add-ClusterSharedVolume â€“Name "Cluster Disk 2"    
   
      
      

    # We let the SQL serivce access the drives we've created.
    # As we're not in production, this will do for now, but ideally
    # we should create a separate user for SQL, etc.

    - name: Set drive/folder permissions for the sql service
      ansible.windows.win_acl:
        user: NT Service\MSSQLSERVER
        path: "{{ item.value + ':\' }}"
        rights: FullControl
        type: allow
        state: present
      loop: "{{ drive_mapping | dict2items }}"        


    # Finally, we run the SQL script as passed in from VCF Automation

    - name: Run DB script on first host
      run_once: true
      ansible.windows.win_shell: |
        sqlcmd -S 127.0.0.1 -E -i "{{ db_script_location }}"
   







