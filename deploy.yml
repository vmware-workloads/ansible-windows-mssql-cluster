- name: Setup SQL Always-On Cluster
  hosts: all
  become: true


  vars:
    ansible_connection: ssh
    ansible_shell_type: powershell
    start_letter: 'E'

  tasks:

    - name: Borrow IP address from Adapter 2 from the first host
      run_once: true
      ansible.windows.win_shell: |
        (Get-NetIPAddress -InterfaceAlias 'Ethernet2' | Where AddressFamily -eq "IPv4").IPAddress
      register: cluster_ip

    - name: Remove borrowed IP from Adapter 2
      ansible.windows.win_shell: |
        Remove-NetIPAddress -InterfaceAlias 'Ethernet2' -IncludeAllCompartments -Confirm:$false  

    - name: Ensure Adapter 0 is set to Primary
      ansible.windows.win_shell: |
        Set-NetIPInterface -InterfaceAlias 'Ethernet0' -InterfaceMetric 0

    - name: Get disk facts from Windows hosts
      community.windows.win_disk_facts:

    - name: Initialize disks
      community.windows.win_initialize_disk:
        disk_number: "{{ item.number }}"
      when:
          - item.partition_style == 'RAW'
          - item.friendly_name == 'VMware Virtual disk'
      loop: "{{ ansible_facts.disks }}"
      loop_control:
          label: "{{ item.unique_id }}"
      register: disks
      
    - debug:
        var: '{{ ansible_facts.disks|selectattr(".physical_disk.device_id") }}'



###


    - name: Set variables
      set_fact:
        letters:
          - d
          - e
          - f
          - g
          - h
          - i
          - j
          - k
          - l
          - m
          - n
          - o
          - p


    - name: Create drive mapping dictionary
      set_fact:
        drive_mapping: "{{ dict(disk_names | zip(letters)) }}"

    - name: Display the drive mapping
      debug:
        var: drive_mapping

    - name: Partition the drives
      community.windows.win_partition:
        drive_letter: "{{ item.value }}"
        disk_number: "{{ index+1 }}"
        partition_size: -1
      loop: "{{ drive_mapping | dict2items }}"   
      loop_control:
        index_var: index
      register: partition_result

    - name: Format disks
      community.windows.win_format:
        drive_letter: "{{ item.value }}"
        file_system: NTFS
        new_label: "{{ item.key }}"
        allocation_unit_size: 65536
      loop: "{{ drive_mapping | dict2items }}"   
      register: format_result



###

    # - name: Partition disks
    #   community.windows.win_partition:
    #     drive_letter: "{{ item.letter }}"
    #     disk_number: "{{ item.number }}"
    #     partition_size: -1
    #   loop:
    #     - {letter: 'E', number: 1 }
    #     - {letter: 'F', number: 2 }
    #     - {letter: 'G', number: 3 }

    # - name: Format disks
    #   community.windows.win_format:
    #     drive_letter: "{{ item.letter }}"
    #     file_system: NTFS
    #     new_label: "{{ item.label }}"
    #     allocation_unit_size: 65536
    #   loop:
    #     - {letter: 'E', label: "{{ disk_names[0] }}" }
    #     - {letter: 'F', label: "{{ disk_names[1] }}" }
    #     - {letter: 'G', label: "{{ disk_names[2] }}" } 

###
        


    - name: Install Failover-Clustering with sub features and management tools
      ansible.windows.win_feature:
        name: Failover-Clustering
        state: present
        include_sub_features: true
        include_management_tools: true

    - name: Install Multipath IO
      ansible.windows.win_feature:
        name: Multipath-IO
        state: present

    - name: Reboot 
      ansible.windows.win_reboot: 

    - name: Configure MultiPath IO
      ansible.windows.win_shell: | 
        Enable-MSDSMAutomaticClaim -BusType iSCSI
        Set-MPIOSetting -CustomPathRecovery Enabled -NewPathRecoveryInterval 20 -NewRetryCount 60 -NewPDORemovePeriod 60 -NewPathVerificationPeriod 30 -NewDiskTimeout 60

    - name: Ensure Chocolatey itself is installed, using community repo for the bootstrap
      win_chocolatey:
        name: chocolatey   
     
    - name: Install SQL Server 2022
      win_chocolatey:
        name: sql-server-2022
        state: present
      retries: 3
      delay: 3
      register: result
      until: result.rc == 0  


    - name: Install SQL Mgmt Tools
      win_chocolatey:
        name: sql-server-management-studio
        state: present   

    - name: Enable TCP and Named Pipes for SQL
      ansible.windows.win_shell: |
        Import-Module -Name SQLPS
        $wmi = New-Object Microsoft.SqlServer.Management.Smo.Wmi.ManagedComputer $hostname
        $uri = "ManagedComputer[@Name='" + (get-item env:\computername).Value + "']/ServerInstance[@Name='MSSQLSERVER']/ServerProtocol[@Name='Tcp']"
        $Tcp=$wmi.GetSmoObject($uri)
        $Tcp.IsEnabled = $true
        $Tcp.Alter()
        $Np = $wmi.GetSmoObject($uri)
        $Np.IsEnabled = $true
        $Np.Alter()
        $Np

    - name: Firewall rule to allow SQL Connections on TCP port 1433
      community.windows.win_firewall_rule:
        name: SQL-Remote
        localport: 1433
        action: allow
        direction: in
        protocol: tcp
        state: present
        enabled: yes    

    - name: Reboot
      ansible.windows.win_reboot:

    - name: Start iSCSI Service + Set to Auto Start
      ansible.windows.win_service:
        name: MSiSCSI
        start_mode: auto
        state: started   

    - name: Configure iSCSI Target + LUNs
      ignore_errors: true
      ansible.windows.win_shell: | 
        New-IscsiTargetPortal -TargetPortalAddress "{{ iscsi_share.IP }}"
        Get-IscsiTarget | Where NodeAddress -eq "{{ iscsi_share.vSAN_iSCSI_iqn }}" | Connect-IscsiTarget

    - name: Format iSCSI disks on First Host
      run_once: true
      ignore_errors: true
      ansible.windows.win_shell: |
        Get-Disk | where FriendlyName -eq "Vmware Virtual SAN" | Initialize-Disk -PartitionStyle GPT -PassThru | New-Partition -AssignDriveLetter -UseMaximumSize | Format-Volume -FileSystem NTFS      


    - name: Collect IP addresses from each host
      set_fact:
        ip_addresses: "{{ groups['sql'] | map('extract', hostvars, 'ansible_host') | list }}" 
        

    - name: Create Windows Cluster
      run_once: true
      ansible.windows.win_shell: |
        $my_ip_list = "{{ ip_addresses }}" | ConvertFrom-Json
        new-cluster -Name {{ 'sql_cluster' + '-' + deployment_id }} -Node $my_ip_list -AdministrativeAccessPoint Dns -StaticAddress {{ cluster_ip.stdout }}

    - name: Enable AlwaysOn Avail Groups
      ansible.windows.win_shell: | 
        foreach ($node in Get-ClusterNode) {Enable-SqlAlwaysOn -ServerInstance $node -Force}  
        Restart-Service MSSQLSERVER


    - name: Set drive/folder permissions for the sql service
      ansible.windows.win_acl:
        user: NT Service\MSSQLSERVER
        path: "{{ item.path }}"
        rights: FullControl
        type: allow
        state: present
      loop:
        - { path: 'E:\' }
        - { path: 'F:\' }
        - { path: 'G:\' }

    # - name: Set ACL for NT SERVICE\MSSQLSERVER
    #   ansible.windows.win_acl:
    #     path: "{{ item.1 }}:\\"
    #     user: 'NT SERVICE\MSSQLSERVER'
    #     permission: full
    #     type: allow
    #   loop: "{{ disk_letter_mapping | dict2items | map(attribute='value') | enumerate(start=1) }}"
    #   register: acl_results

    # - name: Print ACL results
    #   debug:
    #     var: acl_results


    - name: Run DB script on first host
      run_once: true
      ansible.windows.win_shell: |
        sqlcmd -S 127.0.0.1 -E -i "{{ db_script_location }}"
   







