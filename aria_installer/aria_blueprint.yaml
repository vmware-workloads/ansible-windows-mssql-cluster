metadata:
  name: Windows-SQL
  description: v6 beta
version: 1.0.0
formatVersion: 2
variables:
# set the ansible template name
  ansible:
    template_name: MSSQL AG Template
# define the user created on each VM    
  windows:
    user: Admin
# set the SQL port for the load balancer    
  ports:
    sql_port: 1433
# define the number of iscsi luns created per VM
# we need at least one to create the windows cluster
# for use as a quorum disk
  iscsi:
    size: 1
    count: 1
    vsan_cluster_name: Cluster
    vsan_iscsi_vmk: vmk0
# define the location of the database script created by cloud-init 
# on each VM
inputs:
  vmUsername:
    type: string
    title: VM Username
    default: Administrator
  vmPassword:
    type: string
    title: VM Password
    default: P@ssword123!
    encrypted: true
  vmSize:
    type: string
    title: VM Size
    default: medium
    enum:
      - small
      - medium
      - large
  vmCount:
    title: Number ofVMs
    type: integer
    default: 2
  diskConfig:
    default:
      - name: logs
        size: 80
      - name: data
        size: 80
      - name: temp_db
        size: 80
    type: array
    title: |
      Log and Data disks (per VM).
      ADD AT LEAST TWO disks called 'data' and 'logs'
    minItems: 2
    maxItems: 5
    items:
      type: object
      properties:
        size:
          type: integer
          title: Size GB
          default: 80
          maximum: 200
        name:
          type: string
          title: name
  os_diskSize:
    type: integer
    title: OS Disk Size (GB)
    minimum: 90
    maximum: 200
    default: 90
  vmNotes:
    title: VM Notes
    type: string
    default: Windows-SQL
resources:
# utilise three existing networks
# one for iscsi traffic
# web_net for normal traffic
# finally extra_net just to provide an IP that
# can be used by ansible for clustering
# (in leiu of DHCP)
  iscsi_net:
    type: Cloud.NSX.Network
    properties:
      name: ls-vm
      networkType: routed
  web_net:
    type: Cloud.NSX.Network
    properties:
      name: ls-web
      networkType: existing
  extra_net:
    type: Cloud.NSX.Network
    properties:
      name: ls-web2
      networkType: existing
# setup the load balancer 
# create the disks for the VMs
# as defined in the input form.
# We round-robin assign these across
# four scsi adapters to maximise perf
  disk:
    type: Cloud.vSphere.Disk
    allocatePerInstance: true
    properties:
      capacityGb: ${input.diskConfig[count.index % length(input.diskConfig)].size}
      SCSIController: ${'SCSI_Controller_' + to_string(count.index % 4)}
      name: ${input.diskConfig[count.index % length(input.diskConfig)].name}
      tags:
        - key: App
          value: ${self.name}-${count.index}
      count: ${input.vmCount * length(input.diskConfig)}
# Use the vsan_iscsi abx to create
# the required number of iscsi luns
  Custom_vSAN_ISCSI_1:
    type: Custom.vSAN_ISCSI
    properties:
      vSAN_iSCSI_VMK: ${variable.iscsi.vsan_iscsi_vmk}
      vSAN_Cluster_Name: ${variable.iscsi.vsan_cluster_name}
      vSAN_iSCSI_LUN_Prefix: ${env.blueprintName}
      vSAN_iSCSI_Target: ${env.deploymentName}
      vSAN_iSCSI_dataluns: ${variable.iscsi.count}
      vSAN_iSCSI_lunSize: ${variable.iscsi.size}
# VM configuration
# We use cloud init to 
# 1. set the net adaptors to private
# 2. set a unique hostname 'sql-' appended by a uuid
# this needs to be a max of 15 chars, so we truncate
# 3. setup users
  sql_server:
    type: Cloud.vSphere.Machine
    allocatePerInstance: true
    properties:
      count: ${input.vmCount}
      image: windows-nocloudinit
      flavor: medium
      name: ${ substring('sql-' + uuid(),0,14) }
      customizationSpec: windows-template
      remoteAccess:
        authentication: publicPrivateKey
        username: ${input.vmUsername}
        sshKey: 
      networks:
        - network: ${resource.web_net.id}
          assignment: static
          primaryAddress: true
          deviceIndex: 0
        - network: ${resource.iscsi_net.id}
          deviceIndex: 1
        - network: ${resource.extra_net.id}
          assignment: static
          deviceIndex: 2
      attachedDisks: ${map_to_object(slice(resource.disk[*].id, length(input.diskConfig) * count.index, length(input.diskConfig) * (count.index + 1)), "source")}
      storage:
        bootDiskCapacityInGB: ${input.os_diskSize}
   # connect to the AAP ABX, passing in the appropriate
   # variables
  Custom_api_ansible_automation_platform_1:
    type: Custom.AAP
    properties:
      aapSSL: false
      organization_name: Default
      hosts:
        - ${resource.sql_server.*}
      host_groups:
        sql:
          - ${resource.sql_server.*}
      inventory_name: ${env.blueprintName}-${env.deploymentId}
      inventory_variables:
        deployment_id: ${env.deploymentId}
        use_ssl: true
        disk_number: ${length(input.diskConfig)}
        disk_names: ${filter_by(resource.disk.name, (k,v) => v >= 0 && v < length(input.diskConfig))}
      job_template_name: ${variable.ansible.template_name}
      group_variables:
        sql:
          iscsi_share: ${resource.Custom_vSAN_ISCSI_1.*}
