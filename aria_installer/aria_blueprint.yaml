name: confluent-kafka
version: 1.0.0
formatVersion: 2
inputs:
  vmImage:
    type: string
    title: VM Image
    oneOf:
      - title: Ubuntu Focal (20.04)
        const: https://cloud-images.ubuntu.com/focal/current/focal-server-cloudimg-amd64.ova
      - title: Ubuntu Jammy (22.04)
        const: https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64.ova
      - title: Ubuntu Noble (24.04)
        const: https://cloud-images.ubuntu.com/noble/current/noble-server-cloudimg-amd64.ova
    default: https://cloud-images.ubuntu.com/focal/current/focal-server-cloudimg-amd64.ova
  vmUsername:
    type: string
    title: VM Username
    default: confluent
  vmPassword:
    type: string
    title: VM Password
    default: P@ssword123!
    encrypted: true
  broker_vmSize:
    type: string
    title: Broker VM Size
    default: large
    enum:
      - small
      - medium
      - large
  zookeeper_vmSize:
    type: string
    title: Zookeeper VM Size
    default: small
    enum:
      - small
      - medium
      - large
  control-center_vmSize:
    type: string
    title: Control-Center VM Size
    default: medium
    enum:
      - small
      - medium
      - large
  zookeper_vmCount:
    title: Number of Zookeeper VMs
    type: integer
    default: 3
  broker_vmCount:
    title: Number of Zookeeper VMs
    type: integer
    default: 3
    maximum: 16
  broker_diskCount:
    type: integer
    title: Broker Additonal disks
    minimum: 1
    maximum: 8
  broker_diskSize:
    type: integer
    title: Broker Disk Size (GB)
    minimum: 100
    maximum: 2048
  os_diskSize:
    type: integer
    title: OS Disk Size (GB)
    minimum: 60
    maximum: 200
    default: 100
  vmNotes:
    title: VM Notes
    type: string
    default: Kafka
resources:
  Custom_antiaffinity:
    type: Custom.AntiAffinityCR
    dependsOn:
      - kafka-broker
    properties:
      ruleName: ${env.blueprintName}-rule
      vmStringArray: ${map_by(resource.kafka-broker[*].resourceName, name => to_string(name))}
  web_net:
    type: Cloud.NSX.Network
    properties:
      name: ls-web
      networkType: routed
  aap_api:
    type: Custom.AAP
    properties:
      aapSSL: false
      verbose: true
      organization_name: Default
      job_template_name: Confluent Platform Kafka Template
      inventory_name: ${env.blueprintName}-${env.deploymentId}
      inventory_variables:
        use_ssl: true
      hosts:
        - ${resource.control-center.*}
        - ${resource.zookeeper.*}
        - ${resource.kafka-broker.*}
      host_groups:
        control_center:
          - ${resource.control-center.*}
        zookeeper:
          - ${resource.zookeeper.*}
        kafka_broker:
          - ${resource.kafka-broker.*}
      host_variables:
        control_center:
          rack: 1
        zookeeper:
          rack: 1
        kafka_broker:
          rack: 1
  control-center:
    type: Cloud.vSphere.Machine
    allocatePerInstance: true
    properties:
      imageref: ${input.vmImage}
      flavor: ${input.control-center_vmSize}
      name: kafka-control-vm
      remoteAccess:
        authentication: usernamePassword
        username: ${input.vmUsername}
        password: ${input.vmPassword}
      networks:
        - network: ${resource.web_net.id}
          assignment: static
          domain: kafka.net
      cloudConfigSettings:
        deploymentFailOnCloudConfigRuntimeError: true
      cloudConfig: |
        #cloud-config
        hostname: ${self.resourceName}
        users:
          - default
          - name: ${input.vmUsername}
            shell: /bin/bash
            sudo: ALL=(ALL) NOPASSWD:ALL 
        ssh_pwauth: true
        runcmd:
          - netplan apply
        ssh_pwauth: true
        runcmd:
          - netplan apply    
      storage:
        bootDiskCapacityInGB: ${input.os_diskSize}
  zookeeper:
    type: Cloud.vSphere.Machine
    allocatePerInstance: true
    properties:
      imageref: ${input.vmImage}
      flavor: ${input.zookeeper_vmSize}
      name: zookeeper-vm
      remoteAccess:
        authentication: usernamePassword
        username: ${input.vmUsername}
        password: ${input.vmPassword}
      networks:
        - network: ${resource.web_net.id}
          assignment: static
          domain: kafka.net
      cloudConfigSettings:
        deploymentFailOnCloudConfigRuntimeError: true
      cloudConfig: |
        #cloud-config
        hostname: ${self.resourceName}
        users:
          - default
          - name: ${input.vmUsername}
            shell: /bin/bash
            sudo: ALL=(ALL) NOPASSWD:ALL 
        ssh_pwauth: true
        runcmd:
          - netplan apply
        ssh_pwauth: true
        runcmd:
          - netplan apply    
      storage:
        bootDiskCapacityInGB: ${input.os_diskSize}
  kafka-broker:
    type: Cloud.vSphere.Machine
    allocatePerInstance: true
    properties:
      imageRef: ${input.vmImage}
      count: ${input.broker_vmCount}
      flavor: ${input.broker_vmSize}
      name: ${'kafka-broker-' + to_string(count.index)}      
      remoteAccess:
        authentication: usernamePassword
        username: ${input.vmUsername}
        password: ${input.vmPassword}
      cloudConfigSettings:
        deploymentFailOnCloudConfigRuntimeError: true
      attachedDisks: ${map_to_object(slice(resource.broker_disk[*].id, input.broker_diskCount * count.index, input.broker_diskCount * (count.index + 1)), "source")}
      cloudConfig: |
        #cloud-config
        hostname: ${self.resourceName}
        users:
          - default
          - name: ${input.vmUsername}
            shell: /bin/bash
            sudo: ALL=(ALL) NOPASSWD:ALL 
        ssh_pwauth: true
        runcmd:
          - netplan apply
        ssh_pwauth: true
        runcmd:
          - netplan apply  
      networks:
        - network: ${resource.web_net.id}
          assignment: static
          domain: kafka.net
      storage:
        bootDiskCapacityInGB: ${input.os_diskSize}
  broker_disk:
    type: Cloud.vSphere.Disk
    allocatePerInstance: true
    properties:
      capacityGb: ${input.broker_diskSize}
      SCSIController: ${'SCSI_Controller_' + to_string(count.index % 4)}
      count: ${input.broker_vmCount * input.broker_diskCount}
      name: kafka_broker-${count.index}
      tags:
        - key: App
          value: ${to_string('kafka_broker_' + count.index)}
